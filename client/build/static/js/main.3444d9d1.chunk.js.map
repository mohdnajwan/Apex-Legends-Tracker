{"version":3,"sources":["Asset/logo.png","Component/Search.js","App.js","serviceWorker.js","Component/Lifetime.js","Component/Legend.js","Component/Legends.js","Component/CircleLoading.js","Component/ErrorMsg.js","Profile.js","index.js"],"names":["module","exports","Search","useState","username","setUsername","platform","setPlatform","className","src","Logo","alt","type","value","onChange","e","target","placeholder","console","log","to","App","Boolean","window","location","hostname","match","Lifetime","props","data","platformUserHandle","avatarUrl","overview","kills","level","rankScore","displayValue","metadata","rankName","iconUrl","Legend","name","img","kill","seasonWin","season2Win","season3Win","season4Win","Legends","legend","filter","leg","map","obj","imageUrl","stats","season1Win","seasonWins","season2Wins","season3Wins","season4Wins","Circle","ErrorMsg","Profile","useParams","loading","setLoading","errorMsg","setErrorMsg","error","setError","profile","setProfile","summary","setSummary","legends","setLegends","useEffect","getProfile","a","fetch","response","json","errors","message","segments","platformInfo","CircleLoading","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3444d9d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.badc059d.png\";","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../Search.css\";\r\nimport Logo from \"../Asset/logo.png\";\r\n\r\nconst Search = () => {\r\n  // Initialize State\r\n  const [username, setUsername] = useState(\"\");\r\n  const [platform, setPlatform] = useState(\"origin\");\r\n\r\n  // Update username everytime according changes to text form\r\n  const updateUsername = (e) => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  // Update platfrom value according changes to option button\r\n  const updatePlatform = (e) => {\r\n    setPlatform(e.target.value);\r\n    console.log(platform);\r\n  };\r\n\r\n  return (\r\n    <div className=\"background-image\">\r\n      <div>\r\n        <img className=\"image-logo\" src={Logo} alt=\"\" />\r\n      </div>\r\n      <div className=\"search-box\">\r\n        <div>\r\n          <input\r\n            className=\"search-input\"\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={updateUsername}\r\n            placeholder=\"Enter IGN\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <select className=\"search-select\" onChange={updatePlatform}>\r\n            <option value=\"origin\">Origin</option>\r\n            <option value=\"psn\">PS4</option>\r\n            <option value=\"xbox\">XBOX</option>\r\n          </select>\r\n        </div>\r\n        <Link to={`/api/profile/${platform}/${username}`}>\r\n          <button className=\"search-submit\">Search</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport Search from './Component/Search';\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Lifetime = (props) => {\r\n  // Set data\r\n  const { platformUserHandle, avatarUrl } = props.data;\r\n  const { kills, level, rankScore } = props.overview;\r\n\r\n  return (\r\n    <div className=\"lifetime-box\">\r\n      <div>\r\n        <img className=\"profile-image\" src={avatarUrl} alt=\"\" />\r\n        <p>{platformUserHandle}</p>\r\n        <p>Level: {level.displayValue}</p>\r\n        <p>Kills: {kills.displayValue}</p>\r\n      </div>\r\n      <div>\r\n        <p>Rank: {rankScore?.metadata.rankName || \"No information\"}</p>\r\n        <img src={rankScore?.metadata.iconUrl || \"No rank image\"} alt=\"\" />\r\n        <p>MMR: {rankScore?.displayValue || \"0\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lifetime;\r\n","import React from \"react\";\r\n\r\nconst Legend = ({\r\n  name,\r\n  img,\r\n  kill,\r\n  seasonWin,\r\n  season2Win,\r\n  season3Win,\r\n  season4Win,\r\n}) => {\r\n  return (\r\n    <div className=\"legend-justify legends-box\">\r\n      <div>\r\n        <img className=\"legend-image\" src={img} alt=\"\" />\r\n      </div>\r\n      <div className=\"legends-stats\">\r\n        <div>\r\n          <h3 className=\"legend-name\">{name}</h3>\r\n        </div>\r\n\r\n        <span>Kills: {kill || 0}</span>\r\n        {seasonWin ? <p>Season 1 Wins: {seasonWin}</p> : null}\r\n        {season2Win ? <p>Season 2 Wins: {season2Win}</p> : null}\r\n        {season3Win ? <p>Season 3 Wins: {season3Win}</p> : null}\r\n        {season4Win ? <p>Season 4 Wins: {season4Win}</p> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import React, { useState } from \"react\";\r\nimport Legend from \"./Legend\";\r\n\r\nconst Legends = (props) => {\r\n  // Fecth list of legends\r\n  const legend = props.legend\r\n    .filter((leg) => {\r\n      if (leg.type == \"legend\") {\r\n        return leg;\r\n      }\r\n    })\r\n    .map((obj) => {\r\n      return obj;\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      <h2>List of Legends</h2>\r\n      {legend.map((obj) => {\r\n        console.log(obj);\r\n        return (\r\n          <Legend\r\n            name={obj.metadata?.name}\r\n            img={obj.metadata?.imageUrl}\r\n            kill={obj.stats?.kills?.displayValue}\r\n            season1Win={obj.stats?.seasonWins?.displayValue}\r\n            season2Win={obj.stats?.season2Wins?.displayValue}\r\n            season3Win={obj.stats?.season3Wins?.displayValue}\r\n            season4Win={obj.stats?.season4Wins?.displayValue}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legends;\r\n","import React from \"react\";\r\nimport CommonLoading from \"react-loading\";\r\n\r\nconst Circle = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <CommonLoading />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Circle;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst ErrorMsg = ({data}) =>{\r\n    return(\r\n        <div className=\"errorMsg\">\r\n            {data}\r\n            <br/>\r\n            <Link to={`/`}>\r\n                <button className=\"errorButton\">Back to search</button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMsg;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Lifetime from \"./Component/Lifetime\";\r\nimport LegendPage from \"./Component/Legends\";\r\nimport CircleLoading from \"./Component/CircleLoading\";\r\nimport ErrorMessage from \"./Component/ErrorMsg\";\r\nimport \"./Profile.css\";\r\n\r\nconst Profile = () => {\r\n  const { platform, username } = useParams();\r\n\r\n  // State Initialize\r\n  const [loading, setLoading] = useState(true);\r\n  const [errorMsg, setErrorMsg] = useState({});\r\n  const [error, setError] = useState(false);\r\n  const [profile, setProfile] = useState({});\r\n  const [summary, setSummary] = useState({\r\n    kills: {},\r\n    level: {},\r\n    rankScore: {\r\n      metadata: {},\r\n    },\r\n  });\r\n  const [legends, setLegends] = useState([\r\n    {\r\n      stats: {\r\n        kills: {\r\n          displayValue: \"\",\r\n        },\r\n        seasonWins: {},\r\n        season2Wins: {},\r\n        season3Wins: {},\r\n        season4Wins: {},\r\n      },\r\n    },\r\n  ]);\r\n\r\n  // Use Effect to fecth data\r\n  useEffect(() => {\r\n    getProfile();\r\n  }, []);\r\n\r\n  // Fetch Data\r\n  const getProfile = async () => {\r\n    // Try to fetch\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3001/api/${platform}/${username}`\r\n      );\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (data.errors) {\r\n        setErrorMsg(data.errors[0].message);\r\n        setError(true);\r\n      } else {\r\n        setLegends(data.data.segments);\r\n        setProfile(data.data.platformInfo);\r\n        setSummary(data.data.segments[0].stats);\r\n      }\r\n      setLoading(false);\r\n    } catch (error) {\r\n      //If there is error\r\n      setLoading(false);\r\n      setErrorMsg(\"Server Error, failed to fetch data\");\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      {loading ? (\r\n        <CircleLoading />\r\n      ) : error ? (\r\n        <ErrorMessage data={errorMsg} />\r\n      ) : (\r\n        <div>\r\n          <h2>Profile</h2>\r\n          <div className=\"lifetime-stats\">\r\n            <Lifetime data={profile} overview={summary} />\r\n          </div>\r\n          <div>\r\n            <LegendPage legend={legends} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Profile from './Profile';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={App}/>\n        <Route path=\"/api/profile/:platform/:username\" component={Profile}/>\n      </Switch>\n    </Router>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}